es6的新特性有模块导出和引入，es6的模块导出有两个，一个是export和export default；

在一个js文件中export可以导出多个变量或者对象；并且在import引入时不可修其名；

而对于export default是按一个对象导出的，且在import引入时可另拟其名；

其次如果在导入的多个文件中，变量名字相同，为了避免产生命名冲突的问题，

ES6为提供了重命名的方法 as意为将什么作为什么；

例如：

导出单个：

export let myName = "Jon";

导出多个：

let myName = "Jon";

let myAge = 18;

let myfn = function(){
    return "我是"+myName+"！今年"+myAge+"岁了"
}
export {
    myName,
    myAge,
    myfn
}

如果导出单个对象直接export 跟上一个变量或者对象例如：

export function test(){console.log('a')};export let obj = {}

对于export导出与export default导出的不同之处在于export到导出的是一个变量，

或者说按值导出，而export default是按一个对象导出，

并不是直接导出一个值，而是按一个对象来导出。

export按变量导出，export default按对象导出；

而node.js中的导出也有两个分别是exports和module.exports它们两者之前的区别是，

前者通过exports属性导出的对象最终都会添加到Module对象中，

其实exports只不过是module原型上的一个属性，

最终返回给调用的是module.exports而不是exports。

对于node.js中的模块引入require方法；require()方法引入一个模块会把该模块实例化成一个对象，

我们可以把require方法引入的模块，看成new 该对象。看成一个构造函数对象，

我们可以给它赋值给一个变量对象，当访问这个对象本身时，我们就可以通过这个对象的属性去来访问。

exports和module.exports它们两者之前的区别如下：

//exports.js

exports.name = function() {
    console.log("使用exports导出姓名");  
}

//module.exports.js

module.exports.age = function() {
    console.log("使用module.exports导出年龄");  
}

//require.js

var personName = require('./exports');

var personAge = require('./module.exports');

personName.name(); // 使用exports导出姓名

personAge.age(); // 使用module.exports导出年龄

// 执行require.js文件 

node require.js

// a.js
module.exports = ["apple", "banana", "orange"];

// b.js
var opp = require('./a');
console.log(opp);
 
node b.js // ["apple", "banana", "orange"]

