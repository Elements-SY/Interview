闭包的用途就是用来做私有环境的，在这个环境内所有的变量都不会被外界所干扰，

在js中作用域分为两种，一种是全局作用域，一种是函数作用域，

全局所有的变量或者说对象都可以在局部作用域进行访问，但是反过来，

函数作用域的对象就不能够在全局环境中来访问。

有的时候为了封装一个方法而拿来使用，就需要创建一个私有作用域，

一种是通过构造函数来创建一个私有作用域，在该函数内部我们可以定义一些变量或者方法，

为了拿到该函数内的变量或者方法，我们就必须采用对象的方式，为什么非要采用对象的方式呢?

因为如果不采用对象的方式，调用函数时就没法获取函数内部的活动对象。

具体请详细阅读“封装函数的作用.txt”。OK我们来看一下一个典型的闭包函数，如下代码:

function num() {
    var count = 0;
    return function () {
        count++;
        console.log(count)
    }
}
// num()() // 1
// num()() // 1
// num()() // 1
var countNum = num();
countNum() // 1
countNum() // 2
countNum() // 3

从上述代码我们发现，咦~为什么num()()这样调用打印的始终是1，而调用num不调用num函数内部的

匿名函数，把调用num函数作为一个变量存保存起来，然后再去执行num函数内部的匿名函数就做

递增运算了呢?

其原因就是num函数执行环境作为一个变量的方式保存起来了，这个内存保存到栈内存中了，

并没有被释放，又因为父函数内部引用这父函数的一个变量，

导致在每次调用闭包函数的时候或者说父函数内部的函数

时都会向内存中压栈。一旦占内存过大就会发生内存泄漏问题。



什么是闭包，函数内部的函数引用着外部函数的一个变量，并且内部函数作为外部函数的一个返回值，

这样做的目的是为了能够访问函数内部的变量。


闭包之所以不能释放，就是因为调用父函数作为一个变量存驻扎在内存中，不能被释放，

又因为父函数内部引用这父函数的一个变量，导致在每次调用闭包函数的时候或者说父函数内部的函数

时都会向内存中压栈。一旦占内存过大就会发生内存泄漏问题。