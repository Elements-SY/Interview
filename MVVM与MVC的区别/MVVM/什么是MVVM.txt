什么是MVVM ?

在认识什么是MVVM之前先去看在该文件当前的所在目录中看一下mvvm.pmg图片;

建议在阅读本文案的同时同时查看mvvm.pmg图片，已起到图文并茂的方式来对照

该文案来理解MVVM。虽然这种图文并茂的方式有点哪个但并不影响阅读。go on

我们看到在mvvm.pmg图片中的JS都属于Mode层，其次Mode层又包含Data层和逻辑层，

我们通过逻辑层来驱动ViewModel层，最终两则构成View层，它们的关系是：

Mode —— ViewModel —— View

倘若只有Data层并没有逻辑层，如图mvvm02.png，它们的也关系是：

Mode —— ViewModel —— View

Mode层只是缺少了一个逻辑层。

OK，我们再看一下to understand mvvm.jpg这张图片。

不难发现这张图片Mode层与View层是介于ViewModel层之间做双向回流的过程，

与上述之前说的Mode —— ViewModel —— View单向流向不同，其实不然，我们在

mvvm.pmg图片中发现，filters过滤器的方法getType和mvvm02.png中的v-for对dataList数组

循环就是一个双向的过程，在ViewModel层中每次做数据和视图连接时都会回流到Mode层中获取数据

或者做逻辑处理最后再返回到ViewModel层中然后由ViewModel层渲染完毕回到View层中,

直到ViewModel层对Model层中逻辑走完然后再回到View层。

官方的意思是:

由于ViewModel中的双向数据绑定，当Model发生变化，

ViewModel就会自动更新；ViewModel变化，Model也会更新。

我们在回顾一下在没有MVVM模式之前，

我们开发是视图与数据是进行分离的，也就是只有View 和 Mode。并不存在ViewModel层。

在不借助渲染模板引擎之下并不能把数据直接挂在DOM上做视图渲染，即便是借助渲染模板引擎

我们操作DOM也在所难免。在MVVM中我们而是采用数据和事件挂载的方式做处理。

MVVM设计模式的优点：

使得视图与数据以及逻辑处理进行分离，指令化、插件化，轻量级。

有人说MVC模式才是使得视图层和业务层分离，

其实MVVM中准确的说应该是ViewModel层和数据以及逻辑处理进行分离，这一点很受争议。

但是指令化、插件化，轻量级这无疑比起MVC确实是优点所在。

这是MVVM的优点，那么它的缺点在哪里？

MVVM的缺点：

1. 数据绑定也使得bug很难被调试。比如你看到页面异常了，有可能是你的View的代码有bug，

也可能是你的model的代码有问题。数据绑定使得一个位置的Bug被快速传递到别的位置，

要定位原始出问题的地方就变得不那么容易了。

2. 数据双向绑定不利于代码重用。客户端开发最常用的是View，但是数据双向绑定技术，

让你在一个View都绑定了一个model，不同的模块model都不同。那就不能简单重用view了。

3. 一个大的模块中model也会很大，虽然使用方便了也很容易保证数据的一致性，

但是长期持有，不释放内存就造成话费更多的内存。

