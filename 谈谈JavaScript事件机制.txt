谈谈JavaScript事件机制分为事件冒泡，事件捕获以及事件循环
在JavaScript中把标准事件模型的执行分为三个阶段，即捕获阶段->目标阶段->冒泡阶段。
在事件的传播过程中，事件先沿着document节点，一层一层的向下传播，直到遇到注册事件的目标节点，这个过程称之为捕获阶段。
元素注册的事件函数开始运行，运行完毕则由沿着DOM树向上层传播，回到document节点则事件结束，这个过程称之为事件冒泡。
在IE8之前的事件机制没有捕获阶段，只有目标阶段和冒泡阶段。


谈谈JavaScript事件机制分为事件冒泡，
事件捕获以及事件循环

事件冒泡和事件捕获恰恰相反，
事件注册分为三种，一种是dom0级事件，这种方式是直接把事件绑定在元素的标签中；

一种是dom2级事件，这种方式是通过获取元素把事件绑定在改节点对象中；
另一种是通过事件监听dom，el.addEventListener()和attachEvent()

el.addEventListener()第一参数是事件的类型，第二个参数是事件的函数，第三个参数是一个布尔值，是否捕获，
默认为true在捕获阶段，false为冒泡阶段。

attachEvent("on"+type,fn)仅有两个参数，第一个参数是事件的类型，第二个则是事件的函数。
在标准事件监听中移除事件监听使用el.removeEventListener()第一参数是事件的类型，
第二个参数是事件的函数。 

IE8之前则使用target.detachEvent("on"+type,fn)；

说说事件循环就不得不从js是一门单线程开始说起了。
单线程意味着，js代码在执行的任何时候，都只有一个主线程来处理所有的任务。
所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。
为了避免阻塞线程，于是线程上的任务又分为同步任务和异步任务。那么什么是同步和异步呢？
同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；
异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任
务才会进入主线程执行。

所有同步任务都在主线程上执行，形成一个执行栈,
除此之外主线程，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。
当执行栈中的所有同步任务执行完毕，系统就会按次序读取消息队列中的异步任。
主线程不断重复这个过程就称之为事件循环。
那么什么是任务队列？
"任务队列"是一个事件的队列（也可以理解成消息的队列）；
heap(堆)和stack(栈)

1.stack的空间由操作系统自动分配和释放，heap的空间是手动申请和释放的，heap常用new关键字来分配。

2.stack空间有限，heap的空间是很大的自由区。

浏览器的 Event Loop 遵循的是 HTML5 标准，而 NodeJs 的 Event Loop 遵循的是 libuv。
